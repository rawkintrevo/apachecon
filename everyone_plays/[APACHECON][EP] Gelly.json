{"paragraphs":[{"text":"%flink\n\nimport org.apache.flink.api.scala._\n\nimport org.apache.flink.graph.scala._\nimport org.apache.flink.graph.Edge\nimport org.apache.flink.graph.Vertex\n//import org.apache.flink.graph.scala.Graph\n\nimport org.apache.flink.util.Collector\n\nimport java.sql.Timestamp\nimport java.text.SimpleDateFormat\n\nval divvyDateFormat = new SimpleDateFormat(\"MM/dd/yyyy hh:mm\")\n\ndef makeTimestamp(ts: String) = {new java.sql.Timestamp(divvyDateFormat.parse(ts).getTime())}\n\nval rawRides = env.readTextFile(\"file:///home/trevor/gits/data/divvy_data\")\n\nval headlessRides = rawRides.map(line => line.split(\",\")).filter(line => line(0) != \"trip_id\").filter(_.length == 12)\n\ncase class Ride(trip_id: Int,\n                starttime: Timestamp,\n                stoptime: Timestamp,\n                bikeid: Int,\n                tripduration: Int,\n                from_station_id: Int,\n                from_station_name: String,\n                to_station_id: Int,\n                to_station_name: String,\n                usertype: String,\n                gender: String,\n                birthyear: Int)\n                \n\nval ridesDS = headlessRides.map( l =>  Ride(l(0).toInt, \n                                        makeTimestamp(l(1)),\n                                        makeTimestamp(l(2)), \n                                        l(3).toInt, \n                                        l(4).toInt, \n                                        l(5).toInt, \n                                        l(6), \n                                        l(7).toInt, \n                                        l(8), \n                                        l(9), \n                                        l(10), \n                                        l(11).toInt  )).first(1000)\n","authenticationInfo":{},"dateUpdated":"Apr 27, 2016 12:29:36 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1461737893727_-842224902","id":"20160427-011813_416603012","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.flink.api.scala._\nimport org.apache.flink.graph.scala._\nimport org.apache.flink.graph.Edge\nimport org.apache.flink.graph.Vertex\nimport org.apache.flink.util.Collector\nimport java.sql.Timestamp\nimport java.text.SimpleDateFormat\ndivvyDateFormat: java.text.SimpleDateFormat = java.text.SimpleDateFormat@bbfa9f3a\nmakeTimestamp: (ts: String)java.sql.Timestamp\nrawRides: org.apache.flink.api.scala.DataSet[String] = org.apache.flink.api.scala.DataSet@1a70a0e\nheadlessRides: org.apache.flink.api.scala.DataSet[Array[String]] = org.apache.flink.api.scala.DataSet@36558275\ndefined class Ride\nridesDS: org.apache.flink.api.scala.DataSet[Ride] = org.apache.flink.api.scala.DataSet@20ce917d\n"},"dateCreated":"Apr 27, 2016 1:18:13 AM","dateStarted":"Apr 27, 2016 12:29:36 PM","dateFinished":"Apr 27, 2016 12:29:40 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5491"},{"text":"%flink\n\n\nval fromVertices = ridesDS.map(ride => (ride.from_station_id.toLong, ride.from_station_name) )\n                        .distinct(0)\n                        .map(station => new Vertex(station._1, station._2))\n\nval toVertices = ridesDS.map(ride => (ride.to_station_id.toLong, ride.to_station_name) )\n                        .distinct(0)\n                        .map(station => new Vertex(station._1, station._2))\n\nval vertices = fromVertices.union(toVertices)\n\nval edges = ridesDS.map(ride => new Edge(ride.from_station_id.toLong, ride.to_station_id.toLong, ride.tripduration.toDouble) )\n\n/*\nval vertices = ridesDS.map(ride => (ride.from_station_id.toLong, ride.from_station_name) )\n                      \n                        .distinct(0)\n                        //.map(station => new Vertex(station._1, station._2))\n\nval edges = ridesDS.map(ride => (ride.from_station_id.toLong, ride.to_station_id.toLong, ride.tripduration.toDouble) )\n*/\n\nval graph = Graph.fromDataSet( vertices, edges, env)","authenticationInfo":{},"dateUpdated":"Apr 27, 2016 12:29:23 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1461739651063_-1490461689","id":"20160427-014731_1373075732","result":{"code":"ERROR","type":"TEXT","msg":"<console>:17: error: not found: value ridesDS\n            val fromVertices = ridesDS.map(ride => (ride.from_station_id.toLong, ride.from_station_name) )\n                               ^\n"},"dateCreated":"Apr 27, 2016 1:47:31 AM","dateStarted":"Apr 27, 2016 12:29:23 PM","dateFinished":"Apr 27, 2016 12:29:28 PM","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:5492"},{"text":"%md\n\n`CommunityDetection` would be nice, but seems like bug in Scala-> Java conversion.","authenticationInfo":{},"dateUpdated":"Apr 27, 2016 10:26:47 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1461770772376_-48557735","id":"20160427-102612_1557378136","result":{"code":"SUCCESS","type":"HTML","msg":"<p><code>CommunityDetection</code> would be nice, but seems like bug in Scala-> Java conversion.</p>\n"},"dateCreated":"Apr 27, 2016 10:26:12 AM","dateStarted":"Apr 27, 2016 10:26:43 AM","dateFinished":"Apr 27, 2016 10:26:44 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5493"},{"text":"%flink\n\nimport org.apache.flink.graph.library.CommunityDetection\n\nval verticesWithCommunity = graph.run(new CommunityDetection(30, 0.5))\n\n// print the result\nverticesWithCommunity.print","authenticationInfo":{},"dateUpdated":"Apr 27, 2016 10:27:20 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1461770818632_780034865","id":"20160427-102658_1588397239","result":{"code":"ERROR","type":"TEXT","msg":"import org.apache.flink.graph.library.CommunityDetection\n<console>:112: error: polymorphic expression cannot be instantiated to expected type;\n found   : [K]org.apache.flink.graph.library.CommunityDetection[K]\n required: org.apache.flink.graph.GraphAlgorithm[Long,String,Double,?]\n            val verticesWithCommunity = graph.run(new CommunityDetection(30, 0.5))\n                                                  ^\n"},"dateCreated":"Apr 27, 2016 10:26:58 AM","dateStarted":"Apr 27, 2016 10:27:20 AM","dateFinished":"Apr 27, 2016 10:27:20 AM","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:5494"},{"text":"%flink\n\nimport org.apache.flink.graph.library.LabelPropagation\n\nval verticesWithCommunity = graph.run(new LabelPropagation(30))\n\n// print the result\nverticesWithCommunity.print","authenticationInfo":{},"dateUpdated":"Apr 27, 2016 9:54:07 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1461740396903_-655481076","id":"20160427-015956_984785926","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.flink.graph.library.LabelPropagation\nverticesWithCommunity: org.apache.flink.api.java.DataSet[org.apache.flink.graph.Vertex[Long,String]] = org.apache.flink.api.java.operators.DeltaIterationResultSet@33364abc\n(456,Broadway & Ridge Ave)\n(44,Wood St & Division St)\n(222,Milwaukee Ave & Rockwell St)\n(382,Wood St & Milwaukee Ave)\n(61,Millennium Park)\n(29,Wood St & Milwaukee Ave)\n(290,Wood St & Milwaukee Ave)\n(447,Wood St & Milwaukee Ave)\n(107,Wood St & Division St)\n(134,Wood St & Division St)\n(80,Wood St & Division St)\n(259,Wood St & Division St)\n(501,Wood St & Division St)\n(236,Wabash Ave & 8th St)\n(238,Ravenswood Ave & Montrose Ave)\n(160,Wood St & Division St)\n(304,Wood St & Milwaukee Ave)\n(47,Wood St & Division St)\n(158,Wood St & Milwaukee Ave)\n(156,Wood St & Division St)\n(93,Wood St & Division St)\n(43,Wood St & Division St)\n(459,Theater on the Lake)\n(241,Morgan St & Polk St)\n(6,Shedd Aquarium)\n(334,Wood St & Milwaukee Ave)\n(181,Wood St & Division St)\n(144,Millennium Park)\n(223,Wood St & Division St)\n(315,Wood St & Milwaukee Ave)\n(306,Wood St & Milwaukee Ave)\n(347,Wood St & Milwaukee Ave)\n(299,Wood St & Division St)\n(180,Wood St & Milwaukee Ave)\n(285,Wood St & Division St)\n(145,Wood St & Division St)\n(302,Wood St & Milwaukee Ave)\n(130,Wood St & Grand Ave)\n(115,Wood St & Division St)\n(101,63rd St Beach)\n(311,Wood St & Division St)\n(111,Millennium Park)\n(173,Mies van der Rohe Way & Chicago Ave)\n(381,Wood St & Milwaukee Ave)\n(48,Wood St & Division St)\n(245,Wood St & Division St)\n(76,Michigan Ave & 14th St)\n(340,Wood St & Division St)\n(425,Harper Ave & 59th St)\n(28,Wood St & Milwaukee Ave)\n(24,Millennium Park)\n(349,Wood St & Division St)\n(246,Wood St & Division St)\n(414,Canal St & Taylor St)\n(341,Wood St & Division St)\n(199,Wabash Ave & Grand Ave)\n(27,Wood St & Milwaukee Ave)\n(69,Wood St & Division St)\n(251,Montrose Harbor)\n(228,Wood St & Division St)\n(57,Clinton St & Roosevelt Rd)\n(20,Wood St & Milwaukee Ave)\n(324,Wood St & Milwaukee Ave)\n(123,California Ave & Milwaukee Ave)\n(229,Wood St & Milwaukee Ave)\n(40,Wood St & Division St)\n(333,Wood St & Division St)\n(91,Wood St & Milwaukee Ave)\n(260,Union Ave & Grand Ave)\n(225,Wood St & Division St)\n(164,Wood St & Division St)\n(289,Wood St & Milwaukee Ave)\n(90,Millennium Park)\n(219,Wood St & Division St)\n(60,Wood St & Division St)\n(205,Paulina St & 18th St)\n(283,LaSalle St & Jackson Blvd)\n(184,State St & 35th St)\n(288,Wood St & Division St)\n(310,Wood St & Division St)\n(224,Wabash Ave & Adams St)\n(114,Wood St & Division St)\n(176,Wood St & Division St)\n(94,Wood St & Milwaukee Ave)\n(77,Wood St & Division St)\n(7,Millennium Park)\n(113,Wood St & Milwaukee Ave)\n(244,Ravenswood Ave & Irving Park Rd)\n(100,Wood St & Division St)\n(186,Wood St & Division St)\n(182,Wood St & Milwaukee Ave)\n(42,Wood St & Division St)\n(331,Halsted St & Blackhawk St)\n(383,Wood St & Division St)\n(230,Wood St & Division St)\n(295,Wood St & Division St)\n(423,University Ave & 57th St)\n(268,Wood St & Division St)\n(267,Lake Park Ave & 47th St)\n(471,Wood St & Milwaukee Ave)\n(298,Wood St & Division St)\n(157,Millennium Park)\n(54,Wood St & Milwaukee Ave)\n(196,Millennium Park)\n(365,Halsted St & North Branch St)\n(74,Millennium Park)\n(68,Wood St & Division St)\n(129,Wood St & Division St)\n(85,Millennium Park)\n(273,Wood St & Division St)\n(465,Millennium Park)\n(72,Wood St & Division St)\n(350,Wood St & Milwaukee Ave)\n(417,Woodlawn Ave & 55th St)\n(125,Wood St & Milwaukee Ave)\n(53,Wood St & Milwaukee Ave)\n(348,Wood St & Division St)\n(428,Dorchester Ave & 63rd St)\n(172,Wood St & Milwaukee Ave)\n(137,Wood St & Division St)\n(375,Sacramento Blvd & Franklin Blvd)\n(477,Wood St & Milwaukee Ave)\n(163,Wood St & Division St)\n(131,Wood St & Division St)\n(511,Wood St & Milwaukee Ave)\n(308,Wood St & Division St)\n(328,Harper Ave & 59th St)\n(97,Museum Campus)\n(284,Wood St & Division St)\n(23,Wood St & Division St)\n(239,Wood St & Division St)\n(314,Wood St & Division St)\n(5,State St & Harrison St)\n(41,Wood St & Division St)\n(372,Wood St & Milwaukee Ave)\n(506,Wood St & Milwaukee Ave)\n(464,Millennium Park)\n(35,Millennium Park)\n(460,Wood St & Milwaukee Ave)\n(249,Montrose Harbor)\n(58,Wood St & Division St)\n(112,Wood St & Division St)\n(250,Wood St & Division St)\n(332,Wood St & Division St)\n(177,Millennium Park)\n(277,Wood St & Milwaukee Ave)\n(59,Wood St & Division St)\n(217,Wood St & Milwaukee Ave)\n(19,Wood St & Division St)\n(403,Wentworth Ave & 33rd St)\n(491,Wood St & Division St)\n(99,Wood St & Milwaukee Ave)\n(243,Wood St & Milwaukee Ave)\n(75,Canal St & Jackson Blvd)\n(73,Wood St & Division St)\n(36,Wood St & Division St)\n(16,Wood St & Milwaukee Ave)\n(339,Morgan St & 31st St)\n(226,Wood St & Division St)\n(203,Wood St & Milwaukee Ave)\n(263,Wood St & Division St)\n(327,Wood St & Division St)\n(213,Wood St & Milwaukee Ave)\n(452,Wood St & Milwaukee Ave)\n(253,Wood St & Division St)\n(342,Wolcott Ave & Polk St)\n(183,Wood St & Division St)\n(274,Racine Ave & 15th St)\n(133,Wood St & Division St)\n(247,Woodlawn Ave & 55th St)\n(370,Wood St & Division St)\n(102,Stony Island Ave & 67th St)\n(84,Union Ave & Grand Ave)\n(89,Wood St & Division St)\n(343,Wood St & Division St)\n(489,Wood St & Division St)\n(56,Wood St & Division St)\n(110,Millennium Park)\n(418,Woodlawn Ave & 55th St)\n(355,Woodlawn Ave & 55th St)\n(188,Wood St & Division St)\n(204,Woodlawn Ave & 55th St)\n(287,Wood St & Division St)\n(62,Wood St & Division St)\n(461,Broadway & Ridge Ave)\n(463,Wood St & Milwaukee Ave)\n(215,Damen Ave & Madison St)\n(103,Wood St & Division St)\n(143,Wood St & Division St)\n(319,Wood St & Division St)\n(55,Wood St & Division St)\n(220,Wood St & Division St)\n(17,Wood St & Division St)\n(198,Green St (Halsted St) & Madison St)\n(320,Wood St & Division St)\n(149,Calumet Ave & 33rd St)\n(178,Wood St & Division St)\n(359,Wood St & Division St)\n(326,Wood St & Division St)\n(415,University Ave & 57th St)\n(32,Wood St & Division St)\n(150,Canal St & Taylor St)\n(420,Ellis Ave & 55th St)\n(39,Wabash Ave & Adams St)\n(120,Wood St & Division St)\n(170,Wood St & Division St)\n(211,Streeter Dr & Illinois St)\n(52,Wood St & Division St)\n(503,Wood St & Milwaukee Ave)\n(280,Morgan St & 31st St)\n(216,Wood St & Milwaukee Ave)\n(86,Wood St & Milwaukee Ave)\n(22,Wood St & Division St)\n(498,Sawyer Ave & Irving Park Rd)\n(264,Stetson Ave & South Water St)\n(116,Wood St & Division St)\n(117,Wood St & Division St)\n(509,Wood St & Milwaukee Ave)\n(153,Wood St & Milwaukee Ave)\n(161,Wood St & Division St)\n(504,Wood St & Division St)\n(98,Shedd Aquarium)\n(318,Wood St & Division St)\n(419,State St & 35th St)\n(323,Wood St & Division St)\n(312,Wood St & Milwaukee Ave)\n(507,Wood St & Milwaukee Ave)\n(472,Wood St & Milwaukee Ave)\n(37,State St & Van Buren St)\n(402,Shields Ave & 31st St)\n(397,Woodlawn Ave & 55th St)\n(282,Wood St & Division St)\n(214,Wood St & Milwaukee Ave)\n(480,Wood St & Division St)\n(240,Wood St & Milwaukee Ave)\n(303,Wood St & Milwaukee Ave)\n(307,Southport Ave & Clybourn Ave)\n(478,Wood St & Milwaukee Ave)\n(202,Wood St & Division St)\n(165,Wood St & Milwaukee Ave)\n(25,Wood St & Division St)\n(26,Wood St & Division St)\n(286,Franklin St & Quincy St)\n(337,Wood St & Milwaukee Ave)\n(300,Wood St & Milwaukee Ave)\n(2,Buckingham Fountain)\n(325,Wood St & Milwaukee Ave)\n(272,Wood St & Division St)\n(401,Shields Ave & 28th Pl)\n(338,State St & 35th St)\n(212,Wood St & Division St)\n(374,Wood St & Division St)\n(140,Wood St & Division St)\n(233,Sangamon St & Washington Blvd)\n(457,Wood St & Division St)\n(208,Wood St & Division St)\n(14,Wood St & Division St)\n(3,Shedd Aquarium)\n(330,Wood St & Milwaukee Ave)\n(296,Wood St & Division St)\n(248,Woodlawn Ave & 55th St)\n(152,Wood St & Milwaukee Ave)\n(231,Wood St & Milwaukee Ave)\n(128,Millennium Park)\n(232,Wood St & Division St)\n(30,Buckingham Fountain)\n(81,Wood St & Division St)\n(45,Michigan Ave & Congress Pkwy)\n(329,Millennium Park)\n(257,Wood St & Milwaukee Ave)\n(227,Wood St & Milwaukee Ave)\n(33,State St & Van Buren St)\n(364,Wood St & Division St)\n(127,Wood St & Division St)\n(292,Wood St & Division St)\n(21,Wood St & Milwaukee Ave)\n(346,Wood St & Division St)\n(154,Wood St & Division St)\n(194,Michigan Ave & 14th St)\n(49,Buckingham Fountain)\n(305,Wood St & Division St)\n(255,Streeter Dr & Illinois St)\n(50,Wood St & Division St)\n(485,Sawyer Ave & Irving Park Rd)\n(369,Wood St & 35th St)\n(487,Wood St & Division St)\n(301,Millennium Park)\n(291,Wood St & Milwaukee Ave)\n(148,Shields Ave & 28th Pl)\n(121,Blackstone Ave & Hyde Park Blvd)\n(31,Wood St & Division St)\n(171,Wood St & Division St)\n(279,Wood St & Division St)\n(210,Wood St & Division St)\n(434,Wood St & Division St)\n(242,Wood St & Milwaukee Ave)\n(118,Wood St & Division St)\n(207,Halsted St & 37th St)\n(192,Wood St & Division St)\n(66,Wood St & Division St)\n(475,Wood St & Milwaukee Ave)\n(185,Wood St & Division St)\n(294,Wood St & Division St)\n(476,Wood St & Division St)\n(322,Woodlawn Ave & 55th St)\n(87,Wood St & Division St)\n(462,Wood St & Milwaukee Ave)\n(142,Wood St & Division St)\n(458,Wood St & Division St)\n(51,Clark St & Randolph St)\n(262,Halsted St & 37th St)\n(126,Wood St & Division St)\n(162,Wood St & Milwaukee Ave)\n(166,Wood St & Milwaukee Ave)\n(254,Wood St & Milwaukee Ave)\n(124,Wood St & Milwaukee Ave)\n(197,Michigan Ave & Madison St)\n(96,Clark St & Randolph St)\n(135,Wood St & Division St)\n(34,Wood St & Milwaukee Ave)\n(46,Wood St & Division St)\n(174,Millennium Park)\n(344,Wood St & Milwaukee Ave)\n(38,Wood St & Division St)\n(141,Wood St & Milwaukee Ave)\n(309,Wood St & Milwaukee Ave)\n(190,Wood St & Milwaukee Ave)\n(351,Cottage Grove Ave & 51st St)\n(88,Wood St & Division St)\n(191,Wood St & Division St)\n(352,Jeffery Blvd & 67th St)\n(258,Wood St & Division St)\n(119,Wood St & Milwaukee Ave)\n(345,Ellis Ave & 55th St)\n(168,Buckingham Fountain)\n(252,Greenwood Ave & 47th St)\n(256,Wood St & Milwaukee Ave)\n(321,Wabash Ave & 8th St)\n(71,Wood St & Division St)\n(13,Wood St & Milwaukee Ave)\n(316,Wood St & Milwaukee Ave)\n(195,Millennium Park)\n(368,Ashland Ave & Archer Ave)\n(313,Wood St & Division St)\n(67,Wood St & Division St)\n(175,Wood St & Division St)\n(15,Wood St & Division St)\n"},"dateCreated":"Apr 27, 2016 1:59:56 AM","dateStarted":"Apr 27, 2016 9:54:07 AM","dateFinished":"Apr 27, 2016 9:54:16 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5495"},{"text":"%md\n\nthanks Flink community, Vasiliki, and Suneel!\n\n[an insightful example from Suneel](https://github.com/dataArtisans/flink-training-exercises/blob/master/src/main/scala/com/dataartisans/flinktraining/exercises/gelly_scala/PageRankWithEdgeWeights.scala)\n\n```\nHi Trevor,\n\nnote that the community detection algorithm returns a new graph where the vertex values correspond to the computed communities. Also, note that the current implementation expects a graph with java.lang.Long vertex values and java.lang.Double edge values.\n\nThe following should work:\n\nimport java.lang.Long\nimport java.lang.Double\n\n...\n\nval graph: Graph[Long, Long, Double] = ... // create your graph\nval resultGraph = graph.run(new CommunityDetection[Long](30, 0.5))\nresultGraph.getVertices.print()\n\n\nCheers,\n-Vasia.\n```\n\n","authenticationInfo":{},"dateUpdated":"Apr 27, 2016 12:17:12 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1461776188984_-64977773","id":"20160427-115628_671751080","result":{"code":"SUCCESS","type":"HTML","msg":"<p>thanks Flink community, Vasiliki, and Suneel!</p>\n<p><a href=\"https://github.com/dataArtisans/flink-training-exercises/blob/master/src/main/scala/com/dataartisans/flinktraining/exercises/gelly_scala/PageRankWithEdgeWeights.scala\">an insightful example from Suneel</a></p>\n<pre><code>Hi Trevor,\n\nnote that the community detection algorithm returns a new graph where the vertex values correspond to the computed communities. Also, note that the current implementation expects a graph with java.lang.Long vertex values and java.lang.Double edge values.\n\nThe following should work:\n\nimport java.lang.Long\nimport java.lang.Double\n\n...\n\nval graph: Graph[Long, Long, Double] = ... // create your graph\nval resultGraph = graph.run(new CommunityDetection[Long](30, 0.5))\nresultGraph.getVertices.print()\n\n\nCheers,\n-Vasia.\n</code></pre>\n"},"dateCreated":"Apr 27, 2016 11:56:28 AM","dateStarted":"Apr 27, 2016 12:17:07 PM","dateFinished":"Apr 27, 2016 12:17:07 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5496"},{"text":"%flink\n\nimport java.lang.{Long => JLong}\nimport java.lang.{Double => JDouble}\n\nimport org.apache.flink.graph.library.CommunityDetection\n\nval fromVertices: DataSet[Vertex[JLong, JLong]] = ridesDS.map(ride => (ride.from_station_id.toLong.asInstanceOf[JLong], ride.from_station_name) )\n                        .distinct(0)\n                        .map(station => new Vertex(station._1, station._1))\n\n\nval toVertices: DataSet[Vertex[JLong, JLong]] = ridesDS.map(ride => (ride.to_station_id.toLong.asInstanceOf[JLong], ride.to_station_name) )\n                        .distinct(0)\n                        .map(station => new Vertex(station._1, station._1))\n//\nval vertices: DataSet[Vertex[JLong, JLong]] = fromVertices.union(toVertices)\n\n//: DataSet[Edge[java.lang.Long, java.lang.Long, java.lang.Double]]\nval edges = ridesDS.map(ride => new Edge(ride.from_station_id.toLong.asInstanceOf[JLong], ride.to_station_id.toLong.asInstanceOf[JLong], ride.tripduration.toDouble.asInstanceOf[JLong]) )\n\nval graph: Graph[java.lang.Long, java.lang.Long, java.lang.Double] = Graph.fromDataSet( vertices, edges, env)\nval verticesWithCommunity = graph.run(new CommunityDetection(30, 0.5))\n\n// print the result\nverticesWithCommunity.print","authenticationInfo":{},"dateUpdated":"Apr 27, 2016 12:37:14 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1461776219240_1599476617","id":"20160427-115659_543099384","result":{"code":"ERROR","type":"TEXT","msg":"import java.lang.{Long=>JLong}\nimport java.lang.{Double=>JDouble}\nimport org.apache.flink.graph.library.CommunityDetection\nfromVertices: org.apache.flink.api.scala.DataSet[org.apache.flink.graph.Vertex[Long,Long]] = org.apache.flink.api.scala.DataSet@773ce34f\ntoVertices: org.apache.flink.api.scala.DataSet[org.apache.flink.graph.Vertex[Long,Long]] = org.apache.flink.api.scala.DataSet@5d3bc8a7\nvertices: org.apache.flink.api.scala.DataSet[org.apache.flink.graph.Vertex[Long,Long]] = org.apache.flink.api.scala.DataSet@f2fe312\nedges: org.apache.flink.api.scala.DataSet[org.apache.flink.graph.Edge[Long,Long]] = org.apache.flink.api.scala.DataSet@3028d462\n<console>:91: error: type mismatch;\n found   : org.apache.flink.api.scala.DataSet[org.apache.flink.graph.Edge[Long,Long]]\n required: org.apache.flink.api.scala.DataSet[org.apache.flink.graph.Edge[Long,Double]]\n            val graph: Graph[java.lang.Long, java.lang.Long, java.lang.Double] = Graph.fromDataSet( vertices, edges, env)\n                                                                                                              ^\n"},"dateCreated":"Apr 27, 2016 11:56:59 AM","dateStarted":"Apr 27, 2016 12:37:14 PM","dateFinished":"Apr 27, 2016 12:37:15 PM","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:5497"},{"text":"%flink\n\n//graph.getVertices.first(5).collect()\nverticesWithCommunity\n","authenticationInfo":{},"dateUpdated":"Apr 27, 2016 11:45:50 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1461741586617_-143450333","id":"20160427-021946_1354109300","result":{"code":"SUCCESS","type":"TEXT","msg":"res74: org.apache.flink.api.java.DataSet[org.apache.flink.graph.Vertex[Long,String]] = org.apache.flink.api.java.operators.DeltaIterationResultSet@33364abc\n"},"dateCreated":"Apr 27, 2016 2:19:46 AM","dateStarted":"Apr 27, 2016 11:45:50 AM","dateFinished":"Apr 27, 2016 11:45:50 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5498"},{"text":"%flink\n\nimport org.apache.flink.api.scala._\n\nimport org.apache.flink.graph.scala._\nimport org.apache.flink.graph.Edge\nimport org.apache.flink.graph.Vertex\n\n\nval vertices = Seq(new Vertex[Long, String](1L, \"foo\"), new Vertex[Long, String](2L, \"bar\"))\nval edges = Seq(new Edge[Long, String](1L, 2L, \"foobar\"))\n\nval graph = Graph.fromCollection(vertices, edges, env)","authenticationInfo":{},"dateUpdated":"Apr 27, 2016 11:45:50 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1461763895525_-626948811","id":"20160427-083135_2014276719","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.flink.api.scala._\nimport org.apache.flink.graph.scala._\nimport org.apache.flink.graph.Edge\nimport org.apache.flink.graph.Vertex\nvertices: Seq[org.apache.flink.graph.Vertex[Long,String]] = List((1,foo), (2,bar))\nedges: Seq[org.apache.flink.graph.Edge[Long,String]] = List((1,2,foobar))\ngraph: org.apache.flink.graph.scala.Graph[Long,String,String] = org.apache.flink.graph.scala.Graph@f1f31f5\n"},"dateCreated":"Apr 27, 2016 8:31:35 AM","dateStarted":"Apr 27, 2016 9:34:36 AM","dateFinished":"Apr 27, 2016 9:34:38 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5499"},{"text":"%flink\n\nimport org.apache.flink.graph.scala._\n\nval edges1 = getEdgesDataSet(env)","authenticationInfo":{},"dateUpdated":"Apr 27, 2016 8:54:55 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1461764161364_1857742617","id":"20160427-083601_803303154","result":{"code":"ERROR","type":"TEXT","msg":"import org.apache.flink.graph.scala._\n<console>:30: error: not found: value getEdgesDataSet\n            val edges1 = getEdgesDataSet(env)\n                         ^\n"},"dateCreated":"Apr 27, 2016 8:36:01 AM","dateStarted":"Apr 27, 2016 8:54:55 AM","dateFinished":"Apr 27, 2016 8:54:55 AM","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:5500"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1461765295229_-1092240818","id":"20160427-085455_2046402083","dateCreated":"Apr 27, 2016 8:54:55 AM","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:5501"}],"name":"[APACHECON][EP] Gelly","id":"2BHBWN9NU","angularObjects":{"2B9FGGAMR":[],"2BAUGSG18":[],"2B7FY26FF":[],"2BK49FBBT":[],"2BA9PQW6K":[],"2BANREB9T":[],"2B91YJ1JR":[],"2B89JN8NB":[],"2BAZ6AN3R":[],"2B9NH1VM4":[],"2B7JPXM9Z":[],"2BAV7BWDX":[],"2B88H2DWF":[]},"config":{"looknfeel":"default"},"info":{}}